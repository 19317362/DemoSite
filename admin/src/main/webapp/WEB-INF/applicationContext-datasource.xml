<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    
    <!-- These data sources can be collapsed into a single data source by simply configuring the 
    	webDS data source and using Spring aliases for the other two.  The aliases are required, though, 
    	because the data source Spring bean ids are referenced in other places.  Allowing for multiple 
    	data sources is important because content and payment info may be required to exist in different 
    	locations. However, in many cases users will want all data in one schema.  So, if they can all 
    	be in the same schema, use aliases to refer to webDS.  See /WEB-INF/web.xml, /WEB-INF/jetty-env.xml, 
    	and /WEB-INF/applicationContext-admin.xml for more references. -->
    
    <jee:jndi-lookup id="webDS" jndi-name="jdbc/web"/>
    <jee:jndi-lookup id="webSecureDS" jndi-name="jdbc/webSecure"/>
    <jee:jndi-lookup id="webStorageDS" jndi-name="jdbc/cmsStorage"/>
    
</beans>